---
// src/pages/admin/edit-profile.astro
import AdminLayout from '../../layouts/AdminLayout.astro';
import ProfileEditor from '../../components/admin/ProfileEditor.astro';
import { getProfileById } from '../../lib/services/profileService';

// Esta página obtendrá el perfil del usuario actual en el cliente
// El perfil se obtiene desde localStorage para evitar problemas de hidratación
// Podemos pasar un perfil vacío como valor inicial y luego actualizarlo en el cliente

// Estructura base para un perfil vacío
const emptyProfile = {
  basics: {
    name: '',
    last_name: '',
    label: '',
    image: { local: '/images/placeholder.png' },
    email: '',
    profiles: []
  },
  skills: [],
  projects: []
};
---

<AdminLayout title="Editar Perfil">
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Editar Perfil</h1>
    <p class="text-gray-600 dark:text-gray-400">
      Actualiza tu información personal y profesional
    </p>
  </div>
  
  <div id="editor-container">
    <div class="animate-pulse">
      <div class="bg-gray-200 dark:bg-gray-700 h-24 rounded-t-lg mb-2"></div>
      <div class="bg-gray-100 dark:bg-gray-800 p-6 rounded-b-lg">
        <div class="h-6 bg-gray-200 dark:bg-gray-700 rounded mb-4 w-1/2"></div>
        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-4 w-full"></div>
        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded mb-4 w-3/4"></div>
        <div class="grid grid-cols-2 gap-4 mb-4">
          <div class="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
          <div class="h-10 bg-gray-200 dark:bg-gray-700 rounded"></div>
        </div>
        <div class="h-10 bg-gray-200 dark:bg-gray-700 rounded mb-4"></div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { getProfile } from '../../utils/auth.js';
  
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      // Obtener perfil del usuario autenticado desde localStorage
      const profile = getProfile();
      
      if (!profile) {
        throw new Error('No se pudo cargar el perfil');
      }
      
      // Renderizar el editor con el perfil
      const editorContainer = document.getElementById('editor-container');
      
      // Reemplazar el placeholder con el editor
      // Como no podemos usar directamente componentes de Astro en el cliente,
      // creamos un nuevo elemento y lo añadimos al DOM
      
      // Aquí estamos usando un enfoque diferente: Hacemos una petición al servidor
      // para obtener el componente renderizado con los datos actuales
      const response = await fetch('/admin/editor-component', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ profile })
      });
      
      if (!response.ok) {
        throw new Error('Error al obtener el componente editor');
      }
      
      // Obtener el HTML del componente
      const html = await response.text();
      
      // Insertar el HTML en el contenedor
      editorContainer.innerHTML = html;
      
      // Inicializar los event listeners del formulario
      initializeFormEvents(profile);
    } catch (error) {
      console.error('Error al cargar el editor:', error);
      
      const editorContainer = document.getElementById('editor-container');
      editorContainer.innerHTML = `
        <div class="bg-red-100 dark:bg-red-900 p-4 rounded-lg">
          <h2 class="text-lg font-bold text-red-800 dark:text-red-200 mb-2">Error al cargar el editor</h2>
          <p class="text-red-700 dark:text-red-300">
            No se pudo cargar el formulario de edición. Por favor, inténtalo nuevamente o contacta a soporte.
          </p>
          <div class="mt-4">
            <button 
              id="reload-button"
              class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
              Reintentar
            </button>
            <a 
              href="/admin/profile" 
              class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors ml-2">
              Volver al perfil
            </a>
          </div>
        </div>
      `;
      
      // Añadir evento para recargar la página
      document.getElementById('reload-button').addEventListener('click', () => {
        window.location.reload();
      });
    }
  });
  
  // Esta función inicializa los eventos del formulario una vez cargado
  function initializeFormEvents(profile) {
    // Formulario
    const profileForm = document.getElementById('profileForm');
    
    // Botones
    const addSkillButton = document.getElementById('add-skill');
    const addProjectButton = document.getElementById('add-project');
    const addSocialButton = document.getElementById('add-social');
    const cancelButton = document.getElementById('cancel-button');
    
    // Mensaje de estado
    const statusMessage = document.getElementById('statusMessage');
    const statusText = statusMessage?.querySelector('p');
    
    // Contadores
    let skillCounter = document.querySelectorAll('.skill-item').length;
    let projectCounter = document.querySelectorAll('.project-item').length;
    let socialCounter = document.querySelectorAll('.social-item').length;
    
    // Función para añadir habilidad
    if (addSkillButton) {
      addSkillButton.addEventListener('click', () => {
        const skillsContainer = document.getElementById('skills-container');
        const index = skillCounter++;
        
        const skillItem = document.createElement('div');
        skillItem.className = 'skill-item bg-gray-50 dark:bg-gray-700 p-4 rounded-lg mb-4';
        skillItem.innerHTML = `
          <!-- Contenido de la habilidad -->
          <div class="flex justify-between mb-2">
            <h3 class="text-md font-semibold text-gray-800 dark:text-white">Habilidad #${index + 1}</h3>
            <button 
              type="button" 
              class="remove-skill text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
              data-index="${index}"
            >
              Eliminar
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Nombre
              </label>
              <input
                type="text"
                name="skill-name-${index}"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
                required
              />
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Nivel (1-10)
              </label>
              <input
                type="number"
                name="skill-level-${index}"
                value="5"
                min="1"
                max="10"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
                required
              />
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Tipo
              </label>
              <select
                name="skill-type-${index}"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
                required
              >
                <option value="hard">Técnica</option>
                <option value="soft">Blanda</option>
              </select>
            </div>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Palabras clave (separadas por coma)
            </label>
            <input
              type="text"
              name="skill-keywords-${index}"
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
            />
          </div>
        `;
        
        skillsContainer.appendChild(skillItem);
        
        // Añadir evento para eliminar
        skillItem.querySelector('.remove-skill').addEventListener('click', () => {
          skillItem.remove();
        });
      });
    }
    
    // Función para añadir proyecto
    if (addProjectButton) {
      addProjectButton.addEventListener('click', () => {
        const projectsContainer = document.getElementById('projects-container');
        const index = projectCounter++;
        
        const projectItem = document.createElement('div');
        projectItem.className = 'project-item bg-gray-50 dark:bg-gray-700 p-4 rounded-lg mb-4';
        projectItem.innerHTML = `
          <!-- Contenido del proyecto -->
          <div class="flex justify-between mb-2">
            <h3 class="text-md font-semibold text-gray-800 dark:text-white">Proyecto #${index + 1}</h3>
            <button 
              type="button" 
              class="remove-project text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
              data-index="${index}"
            >
              Eliminar
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Nombre
              </label>
              <input
                type="text"
                name="project-name-${index}"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
                required
              />
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                URL
              </label>
              <input
                type="url"
                name="project-url-${index}"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
              />
            </div>
          </div>
          
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Descripción
            </label>
            <textarea
              name="project-description-${index}"
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
            ></textarea>
          </div>
          
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              URL de la imagen
            </label>
            <input
              type="text"
              name="project-image-${index}"
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
            />
          </div>
          
          <div class="flex items-center">
            <input
              type="checkbox"
              id="project-featured-${index}"
              name="project-featured-${index}"
              class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
            />
            <label for="project-featured-${index}" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
              Proyecto Destacado
            </label>
          </div>
        `;
        
        projectsContainer.appendChild(projectItem);
        
        // Añadir evento para eliminar
        projectItem.querySelector('.remove-project').addEventListener('click', () => {
          projectItem.remove();
        });
      });
    }
    
    // Función para añadir red social
    if (addSocialButton) {
      addSocialButton.addEventListener('click', () => {
        const socialsContainer = document.getElementById('socials-container');
        const index = socialCounter++;
        
        const socialItem = document.createElement('div');
        socialItem.className = 'social-item bg-gray-50 dark:bg-gray-700 p-4 rounded-lg mb-4';
        socialItem.innerHTML = `
          <!-- Contenido de red social -->
          <div class="flex justify-between mb-2">
            <h3 class="text-md font-semibold text-gray-800 dark:text-white">Red Social #${index + 1}</h3>
            <button 
              type="button" 
              class="remove-social text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
              data-index="${index}"
            >
              Eliminar
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Red Social
              </label>
              <select
                name="social-network-${index}"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
                required
              >
                <option value="LinkedIn">LinkedIn</option>
                <option value="GitHub">GitHub</option>
                <option value="Twitter">Twitter</option>
                <option value="Instagram">Instagram</option>
                <option value="Default">Otra</option>
              </select>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Usuario
              </label>
              <input
                type="text"
                name="social-username-${index}"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
                required
              />
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                URL
              </label>
              <input
                type="url"
                name="social-url-${index}"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-gray-700 dark:text-white"
                required
              />
            </div>
          </div>
        `;
        
        socialsContainer.appendChild(socialItem);
        
        // Añadir evento para eliminar
        socialItem.querySelector('.remove-social').addEventListener('click', () => {
          socialItem.remove();
        });
      });
    }
    
    // Añadir eventos a los botones de eliminación existentes
    document.querySelectorAll('.remove-skill').forEach(button => {
      button.addEventListener('click', () => {
        button.closest('.skill-item').remove();
      });
    });
    
    document.querySelectorAll('.remove-project').forEach(button => {
      button.addEventListener('click', () => {
        button.closest('.project-item').remove();
      });
    });
    
    document.querySelectorAll('.remove-social').forEach(button => {
      button.addEventListener('click', () => {
        button.closest('.social-item').remove();
      });
    });
    
    // Evento para cancelar
    if (cancelButton) {
      cancelButton.addEventListener('click', () => {
        window.location.href = '/admin/profile';
      });
    }
    
    // Evento para enviar formulario
    if (profileForm) {
      profileForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Obtener los datos del formulario
        import { updateProfile } from '../../utils/auth.js';
        
        // Mostrar estado de carga
        const submitButton = profileForm.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;
        submitButton.innerHTML = 'Guardando...';
        submitButton.disabled = true;
        
        try {
          // Crear objeto de perfil actualizado
          const updatedProfile = {
            ...profile,
            basics: {
              ...profile.basics,
              name: document.getElementById('name').value,
              last_name: document.getElementById('lastName').value,
              label: document.getElementById('label').value,
              email: document.getElementById('email').value,
              phone: document.getElementById('phone').value,
              summary: document.getElementById('summary').value,
              location: {
                ...profile.basics.location,
                city: document.getElementById('city').value,
                country: document.getElementById('country').value
              }
            }
          };
          
          // Recopilar habilidades
          const skills = [];
          document.querySelectorAll('.skill-item').forEach((item, i) => {
            const nameInput = item.querySelector(`[name^="skill-name-"]`);
            const levelInput = item.querySelector(`[name^="skill-level-"]`);
            const typeInput = item.querySelector(`[name^="skill-type-"]`);
            const keywordsInput = item.querySelector(`[name^="skill-keywords-"]`);
            
            if (nameInput && nameInput.value) {
              skills.push({
                name: nameInput.value,
                level: parseInt(levelInput?.value || '5'),
                type: typeInput?.value || 'hard',
                keywords: keywordsInput?.value ? keywordsInput.value.split(',').map(k => k.trim()) : []
              });
            }
          });
          updatedProfile.skills = skills;
          
          // Recopilar proyectos
          const projects = [];
          document.querySelectorAll('.project-item').forEach((item, i) => {
            const nameInput = item.querySelector(`[name^="project-name-"]`);
            const urlInput = item.querySelector(`[name^="project-url-"]`);
            const descriptionInput = item.querySelector(`[name^="project-description-"]`);
            const imageInput = item.querySelector(`[name^="project-image-"]`);
            const featuredInput = item.querySelector(`[name^="project-featured-"]`);
            
            if (nameInput && nameInput.value) {
              projects.push({
                name: nameInput.value,
                url: urlInput?.value || '',
                description: descriptionInput?.value || '',
                image: imageInput?.value || '',
                featured: featuredInput?.checked || false
              });
            }
          });
          updatedProfile.projects = projects;
          
          // Recopilar redes sociales
          const socials = [];
          document.querySelectorAll('.social-item').forEach((item, i) => {
            const networkInput = item.querySelector(`[name^="social-network-"]`);
            const usernameInput = item.querySelector(`[name^="social-username-"]`);
            const urlInput = item.querySelector(`[name^="social-url-"]`);
            
            if (networkInput && usernameInput && usernameInput.value) {
              socials.push({
                network: networkInput.value,
                username: usernameInput.value,
                url: urlInput?.value || ''
              });
            }
          });
          updatedProfile.basics.profiles = socials;
          
          // Enviar actualización
          const result = await updateProfile(updatedProfile);
          
          // Función para mostrar mensaje
          function showMessage(message, isError = false) {
            if (statusMessage && statusText) {
              statusText.textContent = message;
              statusMessage.classList.remove('hidden', 'bg-green-100', 'text-green-800', 'bg-red-100', 'text-red-800');
              statusMessage.classList.add(isError ? 'bg-red-100' : 'bg-green-100');
              statusText.classList.add(isError ? 'text-red-800' : 'text-green-800');
              statusMessage.scrollIntoView({ behavior: 'smooth' });
            }
          }
          
          if (result.success) {
            showMessage('Perfil actualizado correctamente', false);
            setTimeout(() => {
              window.location.href = '/admin/profile';
            }, 1500);
          } else {
            showMessage(result.message || 'Error al actualizar perfil', true);
            
            // Restaurar botón
            submitButton.innerHTML = originalButtonText;
            submitButton.disabled = false;
          }
        } catch (error) {
          console.error('Error en actualización de perfil:', error);
          
          // Mostrar mensaje de error
          if (statusMessage && statusText) {
            statusText.textContent = 'Error al conectar con el servidor';
            statusMessage.classList.remove('hidden', 'bg-green-100');
            statusMessage.classList.add('bg-red-100');
            statusText.classList.add('text-red-800');
            statusMessage.scrollIntoView({ behavior: 'smooth' });
          }
          
          // Restaurar botón
          submitButton.innerHTML = originalButtonText;
          submitButton.disabled = false;
        }
      });
    }
  }
</script>

---
// src/layouts/MainLayout.astro
import '../styles/global.css';

import ThemeToggle from '../components/featured/theme/ThemeToggle.astro';

import siteConfig from '../data/config/site.json'; // Importar la configuración
import ErrorBoundary from '../components/ui/ErrorBoundary.astro';
import BackToTop from '../components/featured/BackToTop.astro';

interface Props {
  title: string; // Mantenemos el título específico de la página
  description?: string; // Mantenemos la descripción específica de la página
  teamName?: string;
}

const { title, description = 'Portafolio del grupo NRC 23731', teamName = 'Grupo A' } = Astro.props;

// Extraer datos globales del sitio/equipo
const teamNameGlobal = siteConfig.team.name; // Nombre del equipo para el logo/footer
const siteDefaultTitle = siteConfig.site.seo.title; // Título por defecto del sitio
const siteDefaultDescription = siteConfig.site.seo.description; // Descripción por defecto

// Usar título/descripción de la página si se proporcionan, si no, usar los por defecto del JSON
const finalTitle = title || siteDefaultTitle;
const finalDescription = description || siteDefaultDescription;
---

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=1.0, maximum-scale=5.0"
    />
    <meta name="description" content={finalDescription} />
    <meta name="generator" content={Astro.generator} />
    <title>{finalTitle}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@xz/fonts@1/serve/meslo.min.css" />
  </head>
  <body class="bg-gray-50 dark:bg-gray-900 min-h-screen flex flex-col">
    <ErrorBoundary fallback="Ocurrió un error al cargar la aplicación. Intente recargar la página.">
      <header class="fixed top-0 left-0 w-full z-50 transition-all duration-300 bg-white/80 dark:bg-gray-900/80 shadow-sm backdrop-blur supports-[backdrop-filter]:bg-white/60 supports-[backdrop-filter]:backdrop-blur-md flex items-center justify-between px-6 py-3">
        <a href={import.meta.env.BASE_URL} class="text-2xl font-bold text-indigo-700 dark:text-white cursor-pointer hover:underline transition-all">
          {teamNameGlobal}
        </a>
        <nav class="flex gap-8">
          <a href="#integrantes" class="text-gray-700 dark:text-gray-200 hover:text-indigo-600 dark:hover:text-indigo-400 transition font-medium">Integrantes</a>
          <a href="#proyectos" class="text-gray-700 dark:text-gray-200 hover:text-indigo-600 dark:hover:text-indigo-400 transition font-medium">Proyectos</a>
        </nav>
        <div class="flex items-center gap-4">
          <ThemeToggle />
        </div>
      </header>
      <main class="flex-1 pt-24 px-4 py-8">
        <slot />
      </main>
      <BackToTop />
      <footer class="w-full py-4 px-6 bg-gray-100 dark:bg-gray-800 text-center text-gray-500 text-sm">
        <p>
          &copy; {new Date().getFullYear()} {teamNameGlobal} - NRC-23731. Derechos reservados.
        </p>
      </footer>
    </ErrorBoundary>
    <script>
      // Aplicar tema guardado inmediatamente para evitar parpadeo
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

      // Usar tema guardado o preferencia del sistema
      const initialTheme = savedTheme || (prefersDark ? 'dark' : 'light');
      document.documentElement.setAttribute('data-theme', initialTheme);
      document.addEventListener('DOMContentLoaded', () => {
        const menuToggle = document.querySelector('.menu-toggle');
        const closeMenu = document.querySelector('.close-menu');
        const mobileMenu = document.querySelector('.mobile-menu');
        const overlay = document.querySelector('.mobile-overlay');
        const body = document.body;
        const mobileLinks = document.querySelectorAll('.mobile-nav-links a');
        const header = document.getElementById('site-header');

        // Efecto de scroll para el header
        if (header) {
          window.addEventListener('scroll', () => {
            if (window.scrollY > 50) {
              header.classList.add('scrolled');
            } else {
              header.classList.remove('scrolled');
            }
          });
        }

        // Función para abrir el menú
        function openMenu() {
          mobileMenu?.classList.add('active');
          overlay?.classList.add('active');
          body.classList.add('menu-open');
          menuToggle?.classList.add('active');
        }

        // Función para cerrar el menú
        function closeMenuFunc() {
          mobileMenu?.classList.remove('active');
          overlay?.classList.remove('active');
          body.classList.remove('menu-open');
          menuToggle?.classList.remove('active');
        }

        // Event listeners
        menuToggle?.addEventListener('click', openMenu);
        closeMenu?.addEventListener('click', closeMenuFunc);
        overlay?.addEventListener('click', closeMenuFunc);

        // Cerrar menú al hacer clic en enlaces
        mobileLinks.forEach((link) => {
          link.addEventListener('click', closeMenuFunc);
        });

        // Cerrar menú al redimensionar
        window.addEventListener('resize', () => {
          if (window.innerWidth > 768 && body.classList.contains('menu-open')) {
            closeMenuFunc();
          }
        });

        // Cerrar menú con Escape
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && mobileMenu?.classList.contains('active')) {
            closeMenuFunc();
          }
        });
      });
    </script>
  </body>
</html>

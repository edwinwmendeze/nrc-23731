---
// ThemeToggle.astro - Botón visual para cambiar entre temas
---

<button
  id="theme-toggle"
  aria-label="Cambiar tema"
  title="Cambiar entre modo claro y oscuro"
  class="theme-toggle"
>
  <!-- Ícono para modo claro (visible en modo oscuro) -->
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="sun-icon"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>

  <!-- Ícono para modo oscuro (visible en modo claro) -->
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="moon-icon"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<script>
  // Este script se ejecuta después de la hidratación del cliente
  document.addEventListener('DOMContentLoaded', () => {
    const themeToggle = document.getElementById('theme-toggle');

    // Función para actualizar la apariencia del botón
    function updateToggleAppearance(theme) {
      if (!themeToggle) return;

      if (theme === 'dark') {
        themeToggle.classList.add('dark-mode');
      } else {
        themeToggle.classList.remove('dark-mode');
      }
    }

    // Configurar estado inicial
    updateToggleAppearance(window.themeManager.getTheme());

    // Agregar listener de clic
    themeToggle?.addEventListener('click', () => {
      const newTheme = window.themeManager.toggleTheme();
      updateToggleAppearance(newTheme);
    });

    // Escuchar cambios externos en el tema
    window.addEventListener('themeChanged', (e) => {
      updateToggleAppearance(e.detail.theme);
    });
  });
</script>

<style>
  .theme-toggle {
    border: none;
    background-color: transparent;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-text);
    position: relative;
    transition: all 0.3s ease;
  }

  .theme-toggle:hover {
    background-color: var(--color-surface);
  }

  .sun-icon,
  .moon-icon {
    position: absolute;
    transition:
      transform 0.5s ease,
      opacity 0.5s ease;
  }

  /* Por defecto, en light mode mostramos la luna */
  .sun-icon {
    opacity: 0;
    transform: scale(0.5) rotate(-45deg);
  }

  .moon-icon {
    opacity: 1;
    transform: scale(1) rotate(0);
  }

  /* En dark mode, mostramos el sol */
  .theme-toggle.dark-mode .sun-icon {
    opacity: 1;
    transform: scale(1) rotate(0);
  }

  .theme-toggle.dark-mode .moon-icon {
    opacity: 0;
    transform: scale(0.5) rotate(45deg);
  }

  /* Mejora: Estilos para dispositivos táctiles */
  @media (hover: none) {
    .theme-toggle:hover {
      background-color: transparent;
    }

    .theme-toggle:active {
      background-color: var(--color-surface);
    }
  }
</style>

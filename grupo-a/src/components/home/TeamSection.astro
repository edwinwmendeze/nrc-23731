---
// src/components/home/TeamSection.astro
import { getProfiles, getProfilesBySkill } from '../../services/profileService';
import type { Profile } from '../../types';
import Button from '../ui/Button.astro';
import SocialLink from '../ui/SocialLink.astro';

// Opciones para la ordenación o filtrado (Usando nuevas capacidades del ORM)
const sortOptions = { field: 'basics.name', order: 'asc' as const };

// Obtener perfiles de manera segura con manejo de excepciones
let profiles: Profile[] = [];
try {
  // Usando el ORM para obtener perfiles ordenados
  profiles = await getProfiles({
    sort: sortOptions,
    limit: 10  // Limitar a 10 perfiles por ejemplo
  });
  
  // Ejemplo de uso de búsqueda por habilidad (opcional)
  // const profilesWithJS = await getProfilesBySkill('JavaScript');
  // console.log(`Encontrados ${profilesWithJS.length} perfiles con habilidades en JavaScript`);
} catch (error) {
  console.error('Error al cargar perfiles de equipo:', error);
  // Continuar con array vacío para evitar fallo de la aplicación
}

// Función mejorada para obtener imagen local y fallback remoto
function getImageSrc(profile: Profile): string {
  if (!profile.basics?.image) return '';
  if (typeof profile.basics.image === 'object') {
    const localPath = profile.basics.image.local;
    const remotePath = profile.basics.image.remote;
    if (localPath) {
      // Probar si la imagen local existe usando import.meta.glob
      try {
        const images = import.meta.glob('/public/images/team/*');
        // Si existe la local, usarla
        if (images['/public' + localPath]) {
          return import.meta.env.BASE_URL + localPath;
        }
      } catch {}
    }
    // Si no existe la local, usar la remota
    if (remotePath) {
      return remotePath;
    }
  }
  return typeof profile.basics.image === 'string' ? profile.basics.image : '';
}

function getImageFallback(profile: Profile): string {
  if (!profile.basics?.image) return '';
  // Verifica si es un objeto y accede a 'remote' de forma segura
  if (typeof profile.basics.image === 'object' && profile.basics.image.remote) {
    return profile.basics.image.remote;
  }
  // El fallback solo aplica si la imagen es un objeto con URL remota
  return '';
}

// Propiedades de sección (opcional, para reutilización)
export interface Props {
  title?: string;
  subtitle?: string;
}

const { 
  title = "Integrantes", 
  subtitle = "Conozca a los futuros profesionales de Ingeniería de Sistemas e Informática detrás de este proyecto" 
} = Astro.props;
---

<section id="integrantes" class="py-20 bg-gray-50 dark:bg-gray-900 w-full">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-12">
      <h2 class="text-4xl font-bold text-gray-900 dark:text-white mb-2 tracking-tight">{title}</h2>
      <div class="h-1 w-16 bg-indigo-600 mx-auto mb-4 rounded-full"></div>
      <p class="text-lg text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">{subtitle}</p>
    </div>
    {profiles.length > 0 ? (
      <div class="grid gap-8 grid-cols-1 md:grid-cols-3">
        {profiles.map((profile) => (
          <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl hover:scale-105 transition-all duration-300 overflow-hidden flex flex-col items-center p-0">
            <img src={getImageSrc(profile)} alt={profile.basics?.name} class="w-32 h-32 object-cover object-center rounded-2xl mx-auto mt-6 shadow-md border-4 border-white dark:border-gray-900" loading="lazy" />
            <div class="w-full flex-1 flex flex-col p-6">
              <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-1">{profile.basics?.name} {profile.basics?.last_name}</h3>
              <p class="text-gray-700 dark:text-gray-200 text-base font-medium mb-1">{profile.basics?.label}</p>
              <div class="flex items-center gap-3 text-sm text-gray-500 dark:text-gray-400 mb-2">
                {profile.basics?.location?.city && (
                  <>
                    <svg class="w-4 h-4 inline-block" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M17.657 16.657L13.414 20.9a2 2 0 01-2.828 0l-4.243-4.243a8 8 0 1111.314 0z"/><path stroke-linecap="round" stroke-linejoin="round" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/></svg>
                    <span>{profile.basics.location.city}, {profile.basics.location.region}</span>
                  </>
                )}
                {profile.basics?.email && (
                  <a href={`mailto:${profile.basics.email}`} title="Enviar correo" class="hover:text-indigo-600 dark:hover:text-indigo-400">
                    <svg class="w-4 h-4 inline-block" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M16 12H8m8 0a4 4 0 11-8 0 4 4 0 018 0zm2 6a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h12a2 2 0 012 2v12z"/></svg>
                  </a>
                )}
              </div>
              <p class="text-gray-600 dark:text-gray-300 text-sm mb-4 text-left line-clamp-2">{profile.basics?.summary}</p>
              <div class="flex gap-2 mb-4">
                {profile.basics?.profiles?.map((social) => (
                  <SocialLink network={social.network} url={social.url} username={social.username} />
                ))}
              </div>
              <Button href={profile.basics?.url} variant="secondary" class="mt-auto w-full">Ver portafolio</Button>
            </div>
          </div>
        ))}
      </div>
    ) : (
      <p class="text-center text-gray-600 dark:text-gray-400 italic my-12">No hay integrantes disponibles actualmente.</p>
    )}
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Script para manejar errores de carga de imágenes
    const images = document.querySelectorAll<HTMLImageElement>('[data-fallback]');
    
    images.forEach(img => {
      img.addEventListener('error', function(this: HTMLImageElement) {
        const fallbackUrl = this.getAttribute('data-fallback');
        if (fallbackUrl) {
          this.src = fallbackUrl;
        } else {
          // Si no hay imagen de respaldo, reemplazamos con un contenedor de "sin imagen"
          const parent = this.parentNode;
          if (parent) {
            const noImage = document.createElement('div');
            noImage.className = 'w-full h-full flex items-center justify-center bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400';
            noImage.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                <circle cx="12" cy="7" r="4"></circle>
              </svg>
            `;
            this.remove();
            parent.appendChild(noImage);
          }
        }
      });
    });
  });
</script>
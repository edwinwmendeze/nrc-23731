---
// CodeBlock.astro
import { createHighlighter } from 'shiki/bundle/web';

interface Props {
  code?: string;
  filePath?: string;
  basePath?: string; // Para seleccionar la ubicación principal (no se usa directamente en glob)
  startLine?: number;
  endLine?: number;
  highlightLines?: number[];
  displayStartLine?: number;
  lang?: string;
  lightTheme?: string;
  darkTheme?: string;
  lineNumbers?: boolean;
  wrap?: boolean;
  showLanguage?: boolean;
  title?: string;
}

let { 
  code,
  filePath,
  basePath = 'src', // Sin barra inicial
  startLine,
  endLine,
  highlightLines = [],
  displayStartLine,
  lang,
  lightTheme = 'github-light', 
  darkTheme = 'github-dark', 
  lineNumbers = false,
  wrap = false,
  showLanguage = true,
  title
} = Astro.props;

// Eliminar la barra inicial de basePath si existe
if (basePath.startsWith('/')) {
  basePath = basePath.substring(1);
}

// Cargar código desde archivo si se proporciona filePath
if (filePath) {
  try {
    // Eliminar la barra inicial de filePath si existe
    if (filePath.startsWith('/')) {
      filePath = filePath.substring(1);
    }
    
    // Importar archivos de diversas ubicaciones comunes con literales estáticos
    const srcFiles = import.meta.glob('/src/**/*.{js,ts,jsx,tsx,astro,vue,svelte,md,mdx,css,scss,html,json,yaml,toml}', { as: 'raw' });
    const rootFiles = import.meta.glob('/*.{js,ts,jsx,tsx,astro,vue,svelte,md,mdx,css,scss,html,json,yaml,toml}', { as: 'raw' });
    const publicFiles = import.meta.glob('/public/**/*.{js,ts,jsx,tsx,astro,vue,svelte,md,mdx,css,scss,html,json,yaml,toml}', { as: 'raw' });
    const componentsFiles = import.meta.glob('/components/**/*.{js,ts,jsx,tsx,astro,vue,svelte,md,mdx,css,scss,html,json,yaml,toml}', { as: 'raw' });
    const libFiles = import.meta.glob('/lib/**/*.{js,ts,jsx,tsx,astro,vue,svelte,md,mdx,css,scss,html,json,yaml,toml}', { as: 'raw' });
    const configFiles = import.meta.glob('/config/**/*.{js,ts,jsx,tsx,astro,vue,svelte,md,mdx,css,scss,html,json,yaml,toml}', { as: 'raw' });
    const uiFiles = import.meta.glob('/ui/**/*.{js,ts,jsx,tsx,astro,vue,svelte,md,mdx,css,scss,html,json,yaml,toml}', { as: 'raw' });
    const testsFiles = import.meta.glob('/tests/**/*.{js,ts,jsx,tsx,astro,vue,svelte,md,mdx,css,scss,html,json,yaml,toml}', { as: 'raw' });
    
    // Seleccionar el conjunto de archivos correcto basado en basePath
    let files;
    switch (basePath) {
      case '':
      case '.':
      case 'root':
        files = rootFiles;
        break;
      case 'public':
        files = publicFiles;
        break;
      case 'components':
        files = componentsFiles;
        break;
      case 'lib':
        files = libFiles;
        break;
      case 'config':
        files = configFiles;
        break;
      case 'ui':
        files = uiFiles;
        break;
      case 'tests':
        files = testsFiles;
        break;
      case 'src':
      default:
        files = srcFiles;
        break;
    }
    
    // Construir la ruta completa del archivo
    let fullPath = '';
    if (basePath === '' || basePath === '.' || basePath === 'root') {
      fullPath = `/${filePath}`;
    } else {
      fullPath = `/${basePath}/${filePath}`;
    }
    
    // Verificar si el archivo existe en el mapa de archivos
    if (files[fullPath]) {
      // Cargar el contenido del archivo
      const fileContent = await files[fullPath]();
      
      // Extraer el fragmento de código si se especifican líneas de inicio y fin
      if (startLine || endLine) {
        const lines = fileContent.split('\n');
        const start = startLine ? Math.max(0, startLine - 1) : 0;
        const end = endLine ? Math.min(lines.length, endLine) : lines.length;
        code = lines.slice(start, end).join('\n');
        
        // Importante: Si no se especificó displayStartLine, usar startLine como valor por defecto
        if (displayStartLine === undefined && startLine) {
          displayStartLine = startLine;
        }
      } else {
        code = fileContent;
      }
      
      // Determinar el lenguaje basado en la extensión del archivo si no se especificó
      if (!lang) {
        const extension = fullPath.split('.').pop()?.toLowerCase();
        if (extension) {
          lang = extension;
        }
      }
    } else {
      // Si no se encuentra, intentar buscar en otras ubicaciones
      const allFiles = {
        ...srcFiles,
        ...rootFiles,
        ...publicFiles,
        ...componentsFiles,
        ...libFiles,
        ...configFiles,
        ...uiFiles,
        ...testsFiles
      };
      
      // Intentar encontrar el archivo con nombre sin prefijar ruta
      const possiblePaths = [
        fullPath,
        `/src/${filePath}`,
        `/${filePath}`
      ];
      
      let foundContent = null;
      let foundPath = null;
      
      for (const path of possiblePaths) {
        if (allFiles[path]) {
          foundContent = await allFiles[path]();
          foundPath = path;
          break;
        }
      }
      
      if (foundContent) {
        // Procesar el contenido encontrado
        if (startLine || endLine) {
          const lines = foundContent.split('\n');
          const start = startLine ? Math.max(0, startLine - 1) : 0;
          const end = endLine ? Math.min(lines.length, endLine) : lines.length;
          code = lines.slice(start, end).join('\n');
          
          if (displayStartLine === undefined && startLine) {
            displayStartLine = startLine;
          }
        } else {
          code = foundContent;
        }
        
        if (!lang) {
          const extension = foundPath.split('.').pop()?.toLowerCase();
          if (extension) {
            lang = extension;
          }
        }
      } else {
        code = `// Error: No se pudo encontrar el archivo: ${filePath}
// Ruta intentada: ${fullPath}
// Intente con basePath: "src", "public", "root", etc.`;
        lang = 'text';
      }
    }
  } catch (error) {
    console.error(`Error cargando el archivo: ${filePath}`, error);
    code = `// Error cargando el archivo: ${filePath}\n// ${error instanceof Error ? error.message : String(error)}`;
    lang = 'text';
  }
}

// Si displayStartLine sigue sin definirse, establecer a 1 por defecto
if (displayStartLine === undefined) {
  displayStartLine = 1;
}

// Establecer código por defecto si no se proporciona
if (!code) {
  code = '// No se proporcionó código';
}

// Función para obtener un nombre más amigable del lenguaje
function getLanguageLabel(lang: string) {
  const labels: Record<string, string> = {
    'js': 'JavaScript',
    'ts': 'TypeScript',
    'jsx': 'React JSX',
    'tsx': 'React TSX',
    'html': 'HTML',
    'css': 'CSS',
    'python': 'Python',
    'java': 'Java',
    'php': 'PHP',
    'go': 'Go',
    'rust': 'Rust',
    'c': 'C',
    'cpp': 'C++',
    'csharp': 'C#',
    'ruby': 'Ruby',
    'swift': 'Swift',
    'kotlin': 'Kotlin',
    'bash': 'Bash',
    'shell': 'Shell',
    'sql': 'SQL',
    'json': 'JSON',
    'yaml': 'YAML',
    'markdown': 'Markdown',
    'md': 'Markdown',
    'xml': 'XML',
    'astro': 'Astro',
    'vue': 'Vue',
    'svelte': 'Svelte',
    'scss': 'SCSS',
    'less': 'Less',
    'graphql': 'GraphQL',
    'dockerfile': 'Dockerfile',
    'text': 'Text'
  };
  
  return labels[lang || 'text'] || (lang ? lang.charAt(0).toUpperCase() + lang.slice(1) : 'Text');
}

const languageLabel = getLanguageLabel(lang || 'text');

// Configurar resaltador y generar HTML
const highlighter = await createHighlighter({
  langs: [lang || 'text'],
  themes: [lightTheme, darkTheme],
});

// Función para transformar el código y resaltar líneas específicas
function addLineHighlights(html: string, highlightLines: number[]) {
  if (highlightLines.length === 0) return html;
  
  // Ajustar highlightLines si startLine no es 1
  let adjustedHighlightLines = [...highlightLines];
  if (startLine && startLine > 1) {
    adjustedHighlightLines = highlightLines.map(line => line - startLine + 1);
  }
  
  let lineCount = 0;
  return html.replace(/<span class="line">(.*?)<\/span>/g, (match, content) => {
    lineCount++;
    if (adjustedHighlightLines.includes(lineCount)) {
      return `<span class="line highlighted">${content}</span>`;
    }
    return match;
  });
}

// Generar HTML para ambos temas
const lightHtml = addLineHighlights(highlighter.codeToHtml(code, {
  lang: lang || 'text',
  theme: lightTheme,
}), highlightLines);

const darkHtml = addLineHighlights(highlighter.codeToHtml(code, {
  lang: lang || 'text',
  theme: darkTheme,
}), highlightLines);

let wrapClass = wrap ? 'whitespace-pre-wrap break-words' : '';
let lineNumbersClass = lineNumbers ? 'line-numbers' : '';

// Si se proporcionó un filePath, extraer solo el nombre del archivo para mostrar
const displayFilePath = filePath ? filePath.split('/').pop() : null;
---

<div class="code-block-container mb-6">
  {/* Título personalizado */}
  {title && (
    <div class="code-title bg-indigo-50 dark:bg-indigo-950 text-indigo-800 dark:text-indigo-300 px-4 py-2 font-medium rounded-t-lg border-b border-indigo-100 dark:border-indigo-800 flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path>
        <polyline points="14 2 14 8 20 8"></polyline>
      </svg>
      <span>{title}</span>
    </div>
  )}

  <div class={`code-block rounded-lg ${!title ? 'rounded-t-lg' : 'rounded-t-none'} overflow-hidden ${wrapClass} ${lineNumbersClass} relative group`} data-start-line={displayStartLine}>
    {showLanguage && (
      <div class="px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm font-mono flex justify-between items-center">
        <span class="flex items-center">
          {displayFilePath && (
            <span class="mr-2 text-gray-500 dark:text-gray-400 text-xs">{displayFilePath}</span>
          )}
          <span>{languageLabel}</span>
          {startLine && endLine && (
            <span class="ml-2 text-gray-500 dark:text-gray-400 text-xs">
              (líneas {startLine}-{endLine})
            </span>
          )}
        </span>
        <button 
          class="copy-button opacity-0 group-hover:opacity-100 transition-opacity px-2 py-1 rounded text-sm bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500"
          aria-label="Copiar código"
          data-code={code.trim()}
        >
          <span class="copy-text flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
              <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
            </svg>
            Copiar
          </span>
        </button>
      </div>
    )}
    
    <div class="block dark:hidden">
      <Fragment set:html={lightHtml} />
    </div>
    <div class="hidden dark:block">
      <Fragment set:html={darkHtml} />
    </div>
  </div>
</div>

<style>
  .code-block :global(pre) {
    margin: 0;
    padding: 1rem;
    overflow-x: auto;
  }
  
  .line-numbers :global(pre) {
    counter-reset: line var(--start-line, 0);
  }
  
  .line-numbers :global(pre > code > .line::before) {
    counter-increment: line;
    content: counter(line);
    display: inline-block;
    width: 1.5rem;
    margin-right: 1rem;
    text-align: right;
    color: rgba(115, 138, 148, 0.4);
  }
  
  .code-block :global(.highlighted) {
    background-color: rgba(255, 255, 0, 0.1);
    display: block;
    width: 100%;
  }
  
  /* Oscuro */
  html.dark .code-block :global(.highlighted) {
    background-color: rgba(255, 255, 255, 0.05);
  }
  
  /* Estilos para el título */
  .code-title {
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }
</style>

<script>
  // Script para el botón de copiar y numeración de líneas
  document.addEventListener('DOMContentLoaded', () => {
    // Configurar numeración de líneas personalizada
    const codeBlocks = document.querySelectorAll('.code-block.line-numbers');
    codeBlocks.forEach(block => {
      const startLine = parseInt(block.getAttribute('data-start-line') || '1', 10);
      // Restamos 1 porque CSS counter-reset inicia en ese valor pero muestra startLine
      block.style.setProperty('--start-line', (startLine - 1).toString());
    });

    // Funcionalidad de copiar código
    const copyButtons = document.querySelectorAll('.copy-button');
    copyButtons.forEach(button => {
      button.addEventListener('click', () => {
        const code = button.getAttribute('data-code');
        const copyText = button.querySelector('.copy-text');
        
        if (code) {
          navigator.clipboard.writeText(code).then(() => {
            copyText.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M20 6L9 17l-5-5"></path>
              </svg>
              ¡Copiado!
            `;
            
            setTimeout(() => {
              copyText.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                  <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                </svg>
                Copiar
              `;
            }, 2000);
          }).catch(err => {
            console.error('Error al copiar: ', err);
            copyText.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              Error
            `;
            setTimeout(() => {
              copyText.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                  <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                </svg>
                Copiar
              `;
            }, 2000);
          });
        }
      });
    });
  });
</script>
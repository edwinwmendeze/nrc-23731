---
/**
 * Componente para mostrar mensajes de error amigables
 * Puede ser utilizado en cualquier parte de la aplicacion donde se necesite mostrar un error
 */
interface Props {
  message: string;
  type?: 'error' | 'warning' | 'info';
  showIcon?: boolean;
  dismissable?: boolean;
}

const { 
  message, 
  type = 'error', 
  showIcon = true,
  dismissable = false 
} = Astro.props;

// Clases condicionales segun el tipo de mensaje
const typeClasses = {
  error: 'bg-red-50 text-red-800 border-red-300',
  warning: 'bg-yellow-50 text-yellow-800 border-yellow-300',
  info: 'bg-blue-50 text-blue-800 border-blue-300'
};

const iconTypes = {
  error: 'exclamation-circle',
  warning: 'exclamation-triangle',
  info: 'information-circle'
};
---

<div class={`flex items-start p-4 mb-4 border rounded-lg ${typeClasses[type]}`} role="alert">
  {showIcon && (
    <div class="flex-shrink-0 mr-3">
      <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
        {type === 'error' && (
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
        )}
        {type === 'warning' && (
          <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
        )}
        {type === 'info' && (
          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
        )}
      </svg>
    </div>
  )}
  <div class="flex-1 text-sm">
    <p>{message}</p>
  </div>
  {dismissable && (
    <button 
      class="dismiss-button ml-auto -mx-1.5 -my-1.5 rounded-lg focus:ring-2 p-1.5 inline-flex h-8 w-8" 
      aria-label="Cerrar">
      <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  )}
</div>

<script>
  // Manejar el cierre de mensajes de error
  document.addEventListener('DOMContentLoaded', () => {
    // Agregar event listener para los botones de cierre
    const dismissButtons = document.querySelectorAll('.dismiss-button');
    dismissButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const alert = button.closest('[role="alert"]');
        if (alert) {
          alert.remove();
        }
      });
    });

    // Remover automáticamente los mensajes de error después de un tiempo
    // Solo para mensajes descartables
    const dismissableMessages = document.querySelectorAll('[role="alert"] .dismiss-button');
    if (dismissableMessages.length > 0) {
      setTimeout(() => {
        dismissableMessages.forEach((button) => {
          const message = button.closest('[role="alert"]');
          if (message) message.remove();
        });
      }, 8000); // 8 segundos
    }
  });
</script>
